buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
    }
}

plugins {
    id "java"
    id "idea"
    id "eclipse"
    id "application"}

version = "0.0.1"
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17
application {
  mainClass.set("io.confluent.developer.KafkaStreamsApplication")
}

repositories {
    mavenCentral()


    maven {
        url "https://packages.confluent.io/maven"
    }
}

apply plugin: "com.github.johnrengelman.shadow"

dependencies {
    implementation "org.slf4j:slf4j-simple:2.0.7"
    implementation 'org.apache.kafka:kafka-streams:3.4.0'
    implementation ('org.apache.kafka:kafka-clients') {
       version {
           strictly '3.4.0'
        }
      }
    implementation 'org.apache.avro:avro:1.11.0'
    implementation 'io.confluent:kafka-streams-avro-serde:7.3.0'
    implementation 'io.confluent:kafka-schema-registry-client:7.3.0'

    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.0'
    implementation 'org.json:json:20240303'
    implementation 'io.confluent:kafka-schema-registry-client:7.7.0'

    // Test dependencies
    testImplementation "org.apache.kafka:kafka-streams-test-utils:3.4.0"
    // testImplementation "junit:junit:4.13.2"// https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testImplementation 'org.yaml:snakeyaml:1.29'

    // Add Protobuf dependencies
    implementation 'com.google.protobuf:protobuf-java:3.24.0'
    implementation 'com.google.protobuf:protobuf-java-util:3.24.0'
    implementation 'io.confluent:kafka-protobuf-serializer:7.7.0'
    implementation 'io.confluent:kafka-streams-protobuf-serde:7.7.0'
}

test{
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        outputs.upToDateWhen { false }
        showStandardStreams = true
        exceptionFormat = "full"
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

jar {
  manifest {
    attributes(
      "Class-Path": configurations.compileClasspath.collect { it.getName() }.join(" "),
      "Main-Class": "io.confluent.developer.KafkaStreamsApplication"
    )
  }
}

shadowJar {
    archivesBaseName = "kafka-as-a-microservice-standalone"
    archiveClassifier = ''
}

